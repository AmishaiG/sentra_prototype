AWSTemplateFormatVersion: "2010-09-09"
Description: "Infrastructure for Mini Sentra Exercise"

Parameters:
  ExistingS3BucketName:
    Type: String
    Default: ""
    Description: Name of an existing S3 bucket for results (leave empty to create a new one).

  CreateNewSNSTopic:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    Description: Set to 'true' to create a new SNS topic or 'false' to use an existing one.
 
  ExistingSNSTopicArn:
    Type: String
    Default: ""
    Description: Provide the ARN of an existing SNS topic if CreateNewSNSTopic is set to 'false'.

Conditions:
  CreateNewBucket: !Equals [!Ref ExistingS3BucketName, ""]
  CreateSNSTopicCondition: !Equals [!Ref CreateNewSNSTopic, "true"]

Resources:
  ResultsBucket:
    Type: AWS::S3::Bucket
    Condition: CreateNewBucket
    Properties:
      BucketName: sentra-results-bucket
    DeletionPolicy: Retain

  ResultsSNSTopic:
    Type: AWS::SNS::Topic
    Condition: CreateSNSTopicCondition
    DeletionPolicy: Retain

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SentraLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SentraS3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                  - s3:ListBucket
                  - s3:GetObject
                Resource: "*"
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: "*"
    DeletionPolicy: Retain

  SentraScannerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SentraScanner
      Handler: lambda_mail_scanner.app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: sentra-prototype-source-code
        S3Key: lambda_mail_scanner.zip
      Environment:
        Variables:
          RESULT_BUCKET: !Ref ResultsBucket
          RESULT_TOPIC_ARN: !If
            - CreateSNSTopicCondition
            - !GetAtt ResultsSNSTopic.Arn
            - !Ref ExistingSNSTopicArn
    DeletionPolicy: Retain

  CloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: SentraLambdaTrigger
      ScheduleExpression: rate(24 hours)
      State: ENABLED
      Targets:
        - Arn: !GetAtt SentraScannerFunction.Arn
          Id: SentraLambdaFunction

  CloudWatchEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SentraScannerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CloudWatchEventRule.Arn

  LambdaPermissionS3:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SentraScannerFunction
      Action: "lambda:InvokeFunction"
      Principal: "s3.amazonaws.com"
    DeletionPolicy: Retain

Outputs:
  ResultsBucketName:
    Value: !If
      - CreateNewBucket
      - !Ref ResultsBucket
      - !Ref ExistingS3BucketName
    Description: Name of the S3 bucket (new or existing).

  ResultsSNSTopicArn:
    Value: !If
      - CreateSNSTopicCondition
      - !GetAtt ResultsSNSTopic.Arn
      - !Ref ExistingSNSTopicArn
    Description: ARN of the SNS topic (new or existing).

  LambdaFunctionName:
    Description: "Name of the Lambda function."
    Value: !Ref SentraScannerFunction
